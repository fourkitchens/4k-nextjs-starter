"""The schema's entry-point for queries."""
type Query {
  """Load a Menu by name."""
  menu(
    """Internal menu name. Eg MAIN"""
    name: MenuAvailable!
  ): Menu

  """Schema information."""
  info: SchemaInformation!

  """Load a Route by path."""
  route(
    """Internal path to load. Eg /about"""
    path: String!
  ): RouteUnion
}

"""List of menus available to load."""
enum MenuAvailable {
  """Main navigation"""
  MAIN
}

"""Entity type menu."""
type Menu implements MenuInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The menu items."""
  items: [MenuItem!]!

  """The menu name."""
  name: String!
}

"""Entity type menu."""
interface MenuInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The menu items."""
  items: [MenuItem!]!

  """The menu name."""
  name: String!
}

"""A menu item defined in the CMS."""
type MenuItem {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The title of the menu item."""
  title: String!

  """The description of the menu item."""
  description: String

  """The URL of the menu item."""
  url: String

  """The language of the menu item."""
  langcode: Language!

  """Whether this menu item links to an internal route."""
  internal: Boolean!

  """Whether this menu item is intended to be expanded."""
  expanded: Boolean!

  """Attributes of this menu item."""
  attributes: MenuItemAttributes!

  """Child menu items of this menu item."""
  children: [MenuItem!]!

  """
  The route this menu item uses. Route loading can be disabled per menu type.
  """
  route: RouteUnion
}

"""A language definition provided by the CMS."""
type Language {
  """The language code."""
  id: ID

  """The language name."""
  name: String

  """The language direction."""
  direction: String
}

"""Menu item options set within the CMS."""
type MenuItemAttributes {
  class: String
}

"""Route types that can exist in the system."""
union RouteUnion = RouteInternal | RouteExternal

"""Route within this website."""
type RouteInternal implements Route {
  """URL of this route."""
  url: String!

  """Whether this route is internal or external."""
  internal: Boolean!

  """Breadcrumb links for this route."""
  breadcrumbs: [Link!]

  """Content assigned to this route."""
  entity: RouteEntityUnion
}

"""Routes represent incoming requests that resolve to content."""
interface Route {
  """URL of this route."""
  url: String!

  """Whether this route is internal or external."""
  internal: Boolean!
}

"""A link."""
type Link {
  """The title of the link."""
  title: String

  """The URL of the link."""
  url: String

  """Whether the link is internal to this website."""
  internal: Boolean!
}

"""A list of possible entities that can be returned by URL."""
union RouteEntityUnion = NodePage

"""A basic page content type."""
type NodePage implements NodeInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the node was last edited."""
  changed: DateTime!

  """Content"""
  content: [NodePageContentUnion!]!

  """The date and time that the content was created."""
  created: DateTime!

  """Language"""
  langcode: Language!

  """URL alias"""
  path: String!

  """Promoted to front page"""
  promote: Boolean!

  """Keep the publication timestamp for each node."""
  publishedAt: DateTime!

  """SEO Title"""
  seoTitle: String!

  """Published"""
  status: Boolean!

  """Sticky at top of lists"""
  sticky: Boolean!

  """Teaser Media"""
  teaserMedia: MediaImage

  """Teaser Text"""
  teaserText: String

  """Intro Text"""
  text: Text

  """Title"""
  title: String!
}

"""Entity type node."""
interface NodeInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the node was last edited."""
  changed: DateTime!

  """The date and time that the content was created."""
  created: DateTime!

  """Language"""
  langcode: Language!

  """URL alias"""
  path: String!

  """Promoted to front page"""
  promote: Boolean!

  """Keep the publication timestamp for each node."""
  publishedAt: DateTime!

  """Published"""
  status: Boolean!

  """Sticky at top of lists"""
  sticky: Boolean!

  """Title"""
  title: String!
}

"""A DateTime object."""
type DateTime {
  """
  Type represents date and time as number of milliseconds from start of the UNIX epoch.
  """
  timestamp: Timestamp!

  """A field whose value exists in the standard IANA Time Zone Database."""
  timezone: TimeZone!

  """A string that will have a value of format ±hh:mm"""
  offset: UtcOffset!

  """RFC 3339 compliant time string."""
  time: Time!
}

"""
Type represents date and time as number of milliseconds from start of the UNIX epoch.
"""
scalar Timestamp

"""A field whose value exists in the standard IANA Time Zone Database."""
scalar TimeZone

"""A string that will have a value of format ±hh:mm"""
scalar UtcOffset

"""RFC 3339 compliant time string."""
scalar Time

"""Content"""
union NodePageContentUnion = ParagraphImage | ParagraphText | ParagraphTextWithMedia | ParagraphVideo

"""Entity type paragraph."""
type ParagraphImage implements ParagraphInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """Image"""
  image: MediaImage!

  """The paragraphs entity language code."""
  langcode: Language!

  """Published"""
  status: Boolean!
}

"""Entity type paragraph."""
interface ParagraphInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The paragraphs entity language code."""
  langcode: Language!

  """Published"""
  status: Boolean!
}

"""Entity type media."""
type MediaImage implements MediaInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Caption"""
  caption: String

  """The time the media item was last edited."""
  changed: DateTime!

  """Copyright"""
  copyright: String

  """The time the media item was created."""
  created: DateTime!

  """Description"""
  description: Text

  """Language"""
  langcode: Language!

  """Image"""
  mediaImage: Image!

  """Name"""
  name: String!

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!

  """Tags"""
  tags: [TermMediaTags!]
}

"""Entity type media."""
interface MediaInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time the media item was last edited."""
  changed: DateTime!

  """The time the media item was created."""
  created: DateTime!

  """Language"""
  langcode: Language!

  """Name"""
  name: String!

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!
}

"""A processed text format defined by the CMS."""
type Text {
  """The raw text value."""
  value: String

  """The processed text value."""
  processed: Html

  """The text format used to process the text value."""
  format: String
}

"""
An HTML string

Content of this type is deemed safe by the server for raw output given the
origin and the context of its usage. The HTML can still contain scripts or style
tags where the creating user had permission to input these.
"""
scalar Html

"""A image object to represent an managed file."""
type Image {
  """The URL of the image."""
  url: String!

  """The width of the image."""
  width: Int!

  """The height of the image."""
  height: Int!

  """The alt text of the image."""
  alt: String

  """The title text of the image."""
  title: String

  """The size of the image in bytes."""
  size: Int!

  """The mime type of the image."""
  mime: String
}

"""Entity type taxonomy_term."""
type TermMediaTags implements TermInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the term was last edited."""
  changed: DateTime!

  """Description"""
  description: Text!

  """The term language code."""
  langcode: Language!

  """Name"""
  name: String!

  """The parents of this term."""
  parent: TermUnion

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!

  """The weight of this term in relation to other terms."""
  weight: Int!
}

"""Entity type taxonomy_term."""
interface TermInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the term was last edited."""
  changed: DateTime!

  """Description"""
  description: Text!

  """The term language code."""
  langcode: Language!

  """Name"""
  name: String!

  """The parents of this term."""
  parent: TermUnion

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!

  """The weight of this term in relation to other terms."""
  weight: Int!
}

"""Entity type taxonomy_term."""
union TermUnion = TermMediaTags

"""Entity type paragraph."""
type ParagraphText implements ParagraphInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The paragraphs entity language code."""
  langcode: Language!

  """Published"""
  status: Boolean!

  """Text"""
  text: Text!
}

"""Entity type paragraph."""
type ParagraphTextWithMedia implements ParagraphInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The paragraphs entity language code."""
  langcode: Language!

  """Media"""
  media: ParagraphTextWithMediaMediaUnion!

  """Media Alignment"""
  mediaAlignment: String!

  """Published"""
  status: Boolean!

  """Text"""
  text: Text!
}

"""Media"""
union ParagraphTextWithMediaMediaUnion = MediaImage | MediaVideo

"""Entity type media."""
type MediaVideo implements MediaInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Caption"""
  caption: String

  """The time the media item was last edited."""
  changed: DateTime!

  """Copyright"""
  copyright: String

  """The time the media item was created."""
  created: DateTime!

  """Description"""
  description: Text

  """Language"""
  langcode: Language!

  """Remote video URL"""
  mediaOembedVideo: String!

  """Name"""
  name: String!

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!

  """Tags"""
  tags: [TermMediaTags!]

  """Transcript"""
  transcript: Link
}

"""Entity type paragraph."""
type ParagraphVideo implements ParagraphInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The paragraphs entity language code."""
  langcode: Language!

  """Published"""
  status: Boolean!

  """Video"""
  video: MediaVideo!
}

"""Route outside of this website."""
type RouteExternal implements Route {
  """URL of this route."""
  url: String!

  """Whether this route is internal or external."""
  internal: Boolean!
}

"""Schema information provided by the system."""
type SchemaInformation {
  """The schema description."""
  description: String

  """The internal path to the front page."""
  home: String

  """The schema version."""
  version: String

  """List of fragments available."""
  fragments: [SchemaFragment!]!
}

"""A fragment representing a type within the schema."""
type SchemaFragment {
  """The scheme type of the fragment."""
  type: String!

  """The name of the fragment."""
  name: String!

  """The base graphql type."""
  class: String!

  """The fragment content."""
  content: String
}

"""The schema's entry-point for mutations."""
type Mutation {
  """Placeholder for mutation extension."""
  _: Boolean!
}

"""The schema's entry-point for subscriptions."""
type Subscription {
  """Placeholder for subscription extension."""
  _: Boolean!
}

"""An email address."""
scalar Email

"""A file object to represent an managed file."""
type File {
  """The name of the file."""
  name: String

  """The URL of the file."""
  url: String!

  """The size of the file in bytes."""
  size: Int!

  """The mime type of the file."""
  mime: String

  """The description of the file."""
  description: String
}

"""Generic input for key-value pairs."""
input KeyValueInput {
  key: String!
  value: String
}

"""Entity type media."""
type MediaFile implements MediaInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time the media item was last edited."""
  changed: DateTime!

  """The time the media item was created."""
  created: DateTime!

  """Description"""
  description: Text

  """Language"""
  langcode: Language!

  """File"""
  mediaFile: File!

  """Name"""
  name: String!

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!

  """Tags"""
  tags: [TermMediaTags!]
}

"""Entity type media."""
union MediaUnion = MediaFile | MediaImage | MediaVideo

"""Entity type menu."""
union MenuUnion = Menu

"""Entity type node."""
union NodeUnion = NodePage

"""Entity type paragraph."""
union ParagraphUnion = ParagraphImage | ParagraphText | ParagraphTextWithMedia | ParagraphVideo

"""A field whose value conforms to the standard E.164"""
scalar PhoneNumber

"""Sort direction."""
enum SortDirection {
  """Ascending"""
  ASC

  """Descending"""
  DESC
}

"""A processed text format with summary defined by the CMS."""
type TextSummary {
  """The raw text value."""
  value: String

  """The processed text value."""
  processed: Html

  """The text format used to process the text value."""
  format: String

  """The processed text summary."""
  summary: Html
}

"""
Unsupported entity or field type in the schema.
This entity may not have been enabled in the schema yet and is being referenced via entity reference.
"""
type UnsupportedType {
  """Unsupported type, always TRUE."""
  unsupported: Boolean
}

"""Untyped structured data. Eg JSON, configuration, settings, attributes."""
scalar UntypedStructuredData

"""Views represent collections of curated data from the CMS."""
interface View {
  """The ID of the view."""
  id: ID!

  """The machine name of the view."""
  view: String!

  """The machine name of the display."""
  display: String!

  """The language code of the view."""
  langcode: String

  """The human friendly label of the view."""
  label: String

  """The description of the view."""
  description: String

  """Information about the page in the view."""
  pageInfo: ViewPageInfo!
}

"""Information about the page in a view."""
type ViewPageInfo {
  """Any result offset being used."""
  offset: Int!

  """The current page being returned."""
  page: Int!

  """How many results per page."""
  pageSize: Int!

  """How many results total."""
  total: Int!
}

"""An exposed filter option for the view."""
type ViewFilter {
  """The filter identifier."""
  id: ID!

  """The filter plugin type."""
  plugin: String!

  """The filter field type."""
  type: String!

  """The filter element label."""
  label: String

  """The filter element description."""
  description: String

  """Whether the filter is required."""
  required: Boolean!

  """Whether the filter allows multiple values."""
  multiple: Boolean!

  """The value for the filter. Could be an array for multiple values."""
  value: UntypedStructuredData

  """The filter element options if any are defined."""
  options: UntypedStructuredData

  """The filter element attributes."""
  attributes: UntypedStructuredData!
}

"""A reference to an embedded view"""
type ViewReference {
  """The machine name of the view."""
  view: String!

  """The machine name of the display."""
  display: String!

  """The contextual filter values used."""
  contextualFilter: [String!]

  """How many results per page."""
  pageSize: Int

  """
  The name of the query used to fetch the data, if the view is a GraphQL display.
  """
  query: String
}

"""All available view result types."""
union ViewResultUnion = UnsupportedType